package com.example.riderapp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.example.riderapp.model.RideActivity;import com.example.riderapp.uiutils.PullAndLoadListView;import com.example.riderapp.uiutils.PullAndLoadListView.OnLoadMoreListener;import com.example.riderapp.uiutils.PullToRefreshListView.OnRefreshListener;import android.app.Activity;import android.content.Context;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.ListFragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.ListView;import android.widget.TextView;public class ActivityPage extends ListFragment {	private List<RideActivity> rideActivities;	private List<RideActivity> rideActivities_temp;	private MainActivityCallBacks callback;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		ViewGroup view = (ViewGroup) inflater.inflate(				R.layout.activity_page_layout, container, false);		// Set a listener to be invoked when the list should be refreshed.		((PullAndLoadListView) view.findViewById(android.R.id.list))				.setOnRefreshListener(new OnRefreshListener() {					@Override					public void onRefresh() {						ActivityRequest ar = new ActivityRequest(true);						ar.execute();					}				});		// set a listener to be invoked when the list reaches the end		((PullAndLoadListView) view.findViewById(android.R.id.list))				.setOnLoadMoreListener(new OnLoadMoreListener() {					@Override					public void onLoadMore() {						ActivityRequest ar = new ActivityRequest(false);						ar.execute();					}				});		return view;	}	public void addNewActi(boolean isHeader) {		if (isHeader) {			rideActivities.addAll(0, rideActivities_temp);		} else {			rideActivities.addAll(rideActivities.size(), rideActivities_temp);		}	}	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		rideActivities = new ArrayList<>();		rideActivities_temp = new ArrayList<>();		addNewActi(true);		ActivityAdapter adapter = new ActivityAdapter(getActivity(),				R.layout.activity_item_layout, rideActivities);		setListAdapter(adapter);	}	@Override	public void onListItemClick(ListView l, View v, int position, long id) {		callback.onActivitySelected(rideActivities.get(position - 1));	}	@Override	public void onAttach(Activity activity) {		super.onAttach(activity);		this.callback = (MainActivityCallBacks) activity;	}	@Override	public void onActivityCreated(@Nullable Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);	}	public void notifyDataChanged(boolean load_type) {		((BaseAdapter) getListAdapter()).notifyDataSetChanged();		if (load_type) {			((PullAndLoadListView) getListView()).onRefreshComplete();		} else {			((PullAndLoadListView) getListView()).onLoadMoreComplete();		}	}	class ActivityRequest extends AsyncTask<String, String, String> {		private final boolean IS_HEADER;		public ActivityRequest(boolean load_type) {			this.IS_HEADER = load_type;		}		@Override		protected String doInBackground(String... params) {			if (isCancelled()) {				return null;			}			try {				Thread.sleep(800);			} catch (InterruptedException e) {				e.printStackTrace();			}			for (int i = 0; i < 8; i++) {				RideActivity ra = new RideActivity();				ra.setTitle("清远一日游");				ra.setFrom_where("广州");				ra.setTo_where("清远");				ra.setTime_count(6);				ra.setLeaderId("黄小棚");				ra.setBegin_date(new SimpleDateFormat("yy-MM-dd HH:mm")						.format(new Date()));				ra.setMembers_count(1);				rideActivities_temp.add(ra);			}			return "";		}		@Override		protected void onPostExecute(String result) {			addNewActi(IS_HEADER);			notifyDataChanged(IS_HEADER);			super.onPostExecute(result);		}		@Override		protected void onCancelled() {			notifyDataChanged(IS_HEADER);			super.onCancelled();		}	}}class ActivityAdapter extends ArrayAdapter<RideActivity> {	private Context context;	private List<RideActivity> objects;	public ActivityAdapter(Context context, int resource,			List<RideActivity> objects) {		super(context, resource, objects);		this.context = context;		this.objects = objects;	}	@Override	public View getView(int position, View convertView, ViewGroup parent) {		// TODO Auto-generated method stub		RideActivity rideActivity = objects.get(position);		LayoutInflater inflater = (LayoutInflater) context				.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);		View view = inflater.inflate(R.layout.activity_item_layout, null);		TextView acti_title = (TextView) view.findViewById(R.id.acti_title);		TextView from_where = (TextView) view				.findViewById(R.id.acti_from_where);		TextView to_where = (TextView) view.findViewById(R.id.acti_to_where);		TextView begin_date = (TextView) view.findViewById(R.id.begin_date);		TextView total_days = (TextView) view.findViewById(R.id.total_day);		TextView members = (TextView) view.findViewById(R.id.total_members);		from_where.setText(rideActivity.getFrom_where());		to_where.setText(rideActivity.getTo_where());		begin_date.setText(rideActivity.getBegin_date());		total_days.setText(rideActivity.getTime_count() + "天");		members.setText(rideActivity.getMembers_count() + "人");		acti_title.setText(rideActivity.getTitle());		// from_where.setText(artical.getFromWhere());		// to_where.setText(artical.getToWhere());		// leader.setText(artical.getLeader());		// arti_title.setText(artical.getTitle());		return view;	}}
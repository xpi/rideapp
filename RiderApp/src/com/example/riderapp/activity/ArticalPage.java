package com.example.riderapp.activity;import java.util.ArrayList;import java.util.List;import com.example.riderapp.R;import com.example.riderapp.adapter.ArticalsAdapter;import com.example.riderapp.model.Artical;import com.example.riderapp.uiutils.PullAndLoadListView;import com.example.riderapp.uiutils.PullAndLoadListView.OnLoadMoreListener;import com.example.riderapp.uiutils.PullToRefreshListView.OnRefreshListener;import android.app.Activity;import android.content.Context;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.ListFragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.ListView;import android.widget.TextView;public class ArticalPage extends ListFragment {	private List<Artical> articals;	private List<Artical> articals_temp;	private MainActivityCallBacks callback;	private int headerItemID = -1;	private int bottomItemID = -1;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		ViewGroup view = (ViewGroup) inflater.inflate(				R.layout.refresh_load_layout, container, false);		// Set a listener to be invoked when the list should be refreshed.		((PullAndLoadListView) view.findViewById(android.R.id.list))				.setOnRefreshListener(new OnRefreshListener() {					@Override					public void onRefresh() {						ArcticalRequest ar = new ArcticalRequest(true);						ar.execute();					}				});		// set a listener to be invoked when the list reaches the end		((PullAndLoadListView) view.findViewById(android.R.id.list))				.setOnLoadMoreListener(new OnLoadMoreListener() {					@Override					public void onLoadMore() {						ArcticalRequest ar = new ArcticalRequest(false);						ar.execute();					}				});		return view;	}	public void notifyDataChanged(boolean load_type) {		((BaseAdapter) getListAdapter()).notifyDataSetChanged();		if (load_type) {			((PullAndLoadListView) getListView()).onRefreshComplete();		} else {			((PullAndLoadListView) getListView()).onLoadMoreComplete();		}	}	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		articals = new ArrayList<>();		articals_temp = new ArrayList<>();		addArtical(true);		ArticalsAdapter adapter = new ArticalsAdapter(getActivity(),				R.layout.artical_item_layout, articals);		setListAdapter(adapter);	}	private void addArtical(boolean load_type) {		if (load_type) {			articals.addAll(0, articals_temp);		} else {			articals.addAll(articals.size(), articals_temp);		}	}	@Override	public void onListItemClick(ListView l, View v, int position, long id) {		callback.onArticalSelected(articals.get(position - 1));	}	@Override	public void onAttach(Activity activity) {		super.onAttach(activity);		this.callback = (MainActivityCallBacks) activity;	}	@Override	public void onActivityCreated(@Nullable Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);	}	class ArcticalRequest extends AsyncTask<String, String, String> {		private final boolean IS_HEADER;		public ArcticalRequest(boolean load_type) {			this.IS_HEADER = load_type;		}		@Override		protected String doInBackground(String... params) {			if (isCancelled()) {				return null;			}			try {				Thread.sleep(800);			} catch (InterruptedException e) {				e.printStackTrace();			}			for (int i = 0; i < 8; i++) {				Artical a = new Artical();				a.setTitle("清远一日游");				a.setFromWhere("广州");				a.setToWhere("清远清新");				a.setLeader("晓晓棚");				articals_temp.add(a);			}			return null;		}		@Override		protected void onPostExecute(String result) {			addArtical(IS_HEADER);			notifyDataChanged(IS_HEADER);			super.onPostExecute(result);		}		@Override		protected void onCancelled() {			notifyDataChanged(IS_HEADER);			super.onCancelled();		}	}}